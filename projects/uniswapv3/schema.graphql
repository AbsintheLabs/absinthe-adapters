type Factory @entity {
  # factory address
  id: ID!
  # amount of pools created
  poolCount: Int!
  # amoutn of transactions all time
  txCount: Int!
  # total volume all time in derived USD
  totalVolumeUSD: Float!
  # total volume all time in derived ETH
  totalVolumeETH: Float!
  # total swap fees all time in USD
  totalFeesUSD: Float!
  # total swap fees all time in USD
  totalFeesETH: Float!
  # all volume even through less reliable USD values
  untrackedVolumeUSD: Float!
  # TVL derived in USD
  totalValueLockedUSD: Float!
  # TVL derived in ETH
  totalValueLockedETH: Float!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: Float!
  # TVL derived in ETH untracked
  totalValueLockedETHUntracked: Float!
  # current owner of the factory
  owner: ID!
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  # price of ETH in usd
  ethPriceUSD: Float!
}

type Token @entity {
  # token address
  id: ID!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: Int!
  # token total supply
  totalSupply: BigInt!
  # volume in token units
  volume: Float!
  # volume in derived USD
  volumeUSD: Float!
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: Float!
  # fees in USD
  feesUSD: Float!
  # transactions across all pools that include this token
  txCount: Int!
  # number of pools containing this token
  poolCount: BigInt!
  # liquidity across all pools in token units
  totalValueLocked: Float!
  # liquidity across all pools in derived USD
  totalValueLockedUSD: Float!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: Float!
  # derived price in ETH
  derivedETH: Float!
  # pools token is in that are white listed for USD pricing
  whitelistPools: [ID!]!
}

type Pool @entity {
  # pool address
  id: ID!
  # creation
  createdAtTimestamp: DateTime!
  # block pool was created at
  createdAtBlockNumber: Int!
  # token0
  token0Id: ID!
  token0: Token!
  # token1
  token1Id: ID!
  token1: Token!
  # fee amount
  feeTier: Int!
  # in range liquidity
  liquidity: BigInt!
  # current price tracker
  sqrtPrice: BigInt!
  # tracker for global fee growth
  feeGrowthGlobal0X128: BigInt!
  # tracker for global fee growth
  feeGrowthGlobal1X128: BigInt!
  # token0 per token1
  token0Price: Float!
  # token1 per token0
  token1Price: Float!
  # current tick
  tick: Int
  # current observation index
  observationIndex: BigInt!
  # all time token0 swapped
  volumeToken0: Float!
  # all time token1 swapped
  volumeToken1: Float!
  # all time USD swapped
  volumeUSD: Float!
  # all time USD swapped, unfiltered for unreliable USD pools
  untrackedVolumeUSD: Float!
  # fees in USD
  feesUSD: Float!
  # all time number of transactions
  txCount: Int!
  # all time fees collected token0
  collectedFeesToken0: Float!
  # all time fees collected token1
  collectedFeesToken1: Float!
  # all time fees collected derived USD
  collectedFeesUSD: Float!
  # total token 0 across all ticks
  totalValueLockedToken0: Float!
  # total token 1 across all ticks
  totalValueLockedToken1: Float!
  # tvl derived ETH
  totalValueLockedETH: Float!
  # tvl USD
  totalValueLockedUSD: Float!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: Float!
  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  balanceWindows: [HistoryWindow!]! @derivedFrom(field: "pool")
  collects: [Collect!]! @derivedFrom(field: "pool")
  ticks: [Tick!]! @derivedFrom(field: "pool")
}

type HistoryWindow @entity {
  id: ID!
  userAddress: String!
  poolId: ID!
  pool: Pool!
  deltaAmount: Float!
  trigger: String!
  startTs: DateTime!
  endTs: DateTime!
  startBlockNumber: Int!
  endBlockNumber: Int!
  valueUsd: Float!
  balanceBefore: Float!
  balanceAfter: Float!
  txHash: String!
  windowDurationMs: Int!
  currency: String!
  extras: JSON!
}

type Tick @entity {
  # format: <pool address>#<tick index>
  id: ID!
  # pool address
  poolAddress: String
  # tick index
  tickIdx: BigInt!
  # pointer to pool
  poolId: ID!
  pool: Pool!
  # total liquidity pool has as tick lower or upper
  liquidityGross: BigInt!
  # how much liquidity changes when tick crossed
  liquidityNet: BigInt!
  # calculated price of token0 of tick within this pool - constant
  price0: Float!
  # calculated price of token1 of tick within this pool - constant
  price1: Float!
  # lifetime volume of token0 with this tick in range
  volumeToken0: Float!
  # lifetime volume of token1 with this tick in range
  volumeToken1: Float!
  # lifetime volume in derived USD with this tick in range
  volumeUSD: Float!
  # lifetime volume in untracked USD with this tick in range
  untrackedVolumeUSD: Float!
  # fees in USD
  feesUSD: Float!
  # all time collected fees in token0
  collectedFeesToken0: Float!
  # all time collected fees in token1
  collectedFeesToken1: Float!
  # all time collected fees in USD
  collectedFeesUSD: Float!
  # created time
  createdAtTimestamp: DateTime!
  # created block
  createdAtBlockNumber: Int!
  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  # swaps: [Swap!]! @derivedFrom(field: "tick")
  # vars needed for fee computation
  feeGrowthOutside0X128: BigInt!
  feeGrowthOutside1X128: BigInt!
}

type Position @entity {
  # Positions created through NonfungiblePositionManager
  # NFT token id
  id: ID!
  # owner of the NFT
  owner: String!
  # pool position is within
  poolId: ID!
  pool: Pool!
  # allow indexing by tokens
  token0Id: ID!
  token0: Token!
  # allow indexing by tokens
  token1Id: ID!
  token1: Token!
  # total position liquidity
  liquidity: BigInt!
  # amount of token 0 ever deposited to position
  depositedToken0: Float!
  # amount of token 1 ever deposited to position
  depositedToken1: Float!
  # amount of token 0 ever withdrawn from position (without fees)
  withdrawnToken0: Float!
  # amount of token 1 ever withdrawn from position (without fees)
  withdrawnToken1: Float!
  # all time collected fees in token0
  collectedFeesToken0: Float!
  # all time collected fees in token1
  collectedFeesToken1: Float!
  # vars needed for fee computation
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
}

type PositionSnapshot @entity {
  # <NFT token id>#<block number>
  id: ID!
  # owner of the NFT
  owner: String!
  # pool the position is within
  poolId: ID!
  pool: Pool!
  # position of which the snap was taken of
  positionId: ID!
  position: Position!
  # block in which the snap was created
  blockNumber: Int!
  # timestamp of block in which the snap was created
  timestamp: DateTime!
  # total position liquidity
  liquidity: BigInt!
  # amount of token 0 ever deposited to position
  depositedToken0: Float!
  # amount of token 1 ever deposited to position
  depositedToken1: Float!
  # amount of token 0 ever withdrawn from position (without fees)
  withdrawnToken0: Float!
  # amount of token 1 ever withdrawn from position (without fees)
  withdrawnToken1: Float!
  # all time collected fees in token0
  collectedFeesToken0: Float!
  # all time collected fees in token1
  collectedFeesToken1: Float!
  # tx in which the snapshot was initialized
  transactionId: ID!
  transaction: Tx!
  # internal vars needed for fee computation
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
}

type Tx @entity {
  # txn hash
  id: ID!
  # block txn was included in
  blockNumber: Int!
  # timestamp txn was confirmed
  timestamp: DateTime!
  # gas used during txn execution
  gasUsed: BigInt!
  gasPrice: BigInt!
  # derived values
  flashed: [Flash]! @derivedFrom(field: "transaction")
  collects: [Collect]! @derivedFrom(field: "transaction")
}

type Collect @entity {
  # transaction hash + "#" + index in collect Transaction array
  id: ID!
  # pointer to txn
  transactionId: ID!
  transaction: Tx!
  # timestamp of event
  timestamp: DateTime!
  # pool collect occured within
  poolId: ID!
  pool: Pool!
  # owner of position collect was performed on
  owner: String
  # amount of token0 collected
  amount0: Float!
  # amount of token1 collected
  amount1: Float!
  # derived amount based on available prices of tokens
  amountUSD: Float
  # lower tick of position
  tickLower: Int!
  # uppper tick of position
  tickUpper: Int!
  # index within the txn
  logIndex: Int
}

type Flash @entity {
  # transaction hash + "-" + index in collect Transaction array
  id: ID!
  # pointer to txn
  transaction: Tx!
  transactionId: ID!
  # timestamp of event
  timestamp: DateTime!
  # pool collect occured within
  poolId: ID!
  pool: Pool!
  # sender of the flash
  sender: String!
  # recipient of the flash
  recipient: String!
  # amount of token0 flashed
  amount0: Float!
  # amount of token1 flashed
  amount1: Float!
  # derived amount based on available prices of tokens
  amountUSD: Float!
  # amount token0 paid for flash
  amount0Paid: Float!
  # amount token1 paid for flash
  amount1Paid: Float!
  # index within the txn
  logIndex: Int
}
