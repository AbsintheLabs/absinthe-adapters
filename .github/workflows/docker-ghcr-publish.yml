name: Build & Push Docker Images to GHCR

on:
  push:
    branches: [kushagra/improvements]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.dockerfiles.outputs.matrix }}
      has-dockerfiles: ${{ steps.dockerfiles.outputs.has-dockerfiles }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
    
    - name: Get Dockerfile list
      id: dockerfiles
      run: |
        dockerfiles=$(find ops/dockerfiles -name "Dockerfile*" -type f | sed 's|ops/dockerfiles/||' | jq -R -s -c 'split("\n")[:-1]')
        echo "matrix=$dockerfiles" >> $GITHUB_OUTPUT
        
        # Check if we have any dockerfiles
        if [ "$(echo "$dockerfiles" | jq 'length')" -gt 0 ]; then
          echo "has-dockerfiles=true" >> $GITHUB_OUTPUT
        else
          echo "has-dockerfiles=false" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    needs: prepare
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.has-dockerfiles == 'true' }}

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}

    - name: Extract image name
      id: image-name
      run: |
        dockerfile_path="${{ matrix.dockerfile }}"
        if [[ "$dockerfile_path" == "Dockerfile" ]]; then
          image_name="main"
        else
          image_name=$(echo "$dockerfile_path" | sed 's/Dockerfile[.-]*//' | tr '[:upper:]' '[:lower:]')
        fi
        echo "name=$image_name" >> $GITHUB_OUTPUT

    - name: Build and push UniswapV2 image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ops/dockerfiles/Dockerfile.uniswapv2
        push: true
        tags: ghcr.io/absinthelabs/absinthe-uniswapv2:latest

    - name: Build and push abs-app image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ops/dockerfiles/Dockerfile.abs-app
        push: true
        tags: ghcr.io/absinthelabs/abs-app:latest

    - name: Notify Slack on Success
      if: success()
      uses: slackapi/slack-github-action@v1.27.0
      with:
        payload: |
          {
            "text": "✅ Build succeeded for ${{ github.repository }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "✅ Build *succeeded* for ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Notify Slack on Failure
      if: failure()
      uses: slackapi/slack-github-action@v1.27.0
      with:
        payload: |
          {
            "text": "❌ Build failed for ${{ github.repository }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "❌ Build *failed* for ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View build details>"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK


    